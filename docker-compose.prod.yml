# Production Docker Compose Configuration
# 
# Optimized for production deployment with SSL, load balancing,
# monitoring, and proper security configurations.

version: '3.8'

services:
  # Nginx Load Balancer and SSL Termination
  nginx:
    image: nginx:alpine
    container_name: document-chatbot-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - chatbot-network

  # FastAPI Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: document-chatbot-backend-prod
    environment:
      - ENVIRONMENT=production
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
    volumes:
      - document-storage:/app/documents
      - chroma-data:/app/chroma_db
    depends_on:
      - postgres
      - redis
      - chromadb
    restart: unless-stopped
    networks:
      - chatbot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: document-chatbot-frontend-prod
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    restart: unless-stopped
    networks:
      - chatbot-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: document-chatbot-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    networks:
      - chatbot-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: document-chatbot-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - chatbot-network

  # ChromaDB Vector Database
  chromadb:
    image: chromadb/chroma:latest
    container_name: document-chatbot-chromadb
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
    volumes:
      - chroma-data:/chroma/chroma
    restart: unless-stopped
    networks:
      - chatbot-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: document-chatbot-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    restart: unless-stopped
    networks:
      - chatbot-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: document-chatbot-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - chatbot-network

volumes:
  document-storage:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  chroma-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  chatbot-network:
    driver: bridge